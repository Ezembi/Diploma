/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client.gui;

import client.tasks.JobTask;
import client.tasks.PingTask;
import client.utils.ConfigEditor;
import client.utils.FileHelper;
import java.awt.Component;
import java.awt.Container;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.data.Data;
import model.data.Job;
import model.data.Response;
import model.utils.Logger;
import model.web.ClientHttp;
import model.web.ClientHttp.ConnectListener;

/**
 *
 * @author user
 */
public class MainForm extends javax.swing.JFrame {

    private String url = "";
    private final String TAG = "Client";
    private final String CONFIG_NAME = "connect.cfg";
    private String ip, port;
    private final String NEW = "новая";
    private final String ERROR = "ошибка обработки";
    private final String OK = "выполнена";
    private ClientHttp connect = null;
    private List<Job<Data, Data>> jobs = null;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        Map<String, String> map = new HashMap();

        map = ConfigEditor.getConfig(CONFIG_NAME);
        if (map != null) {
            ip = map.get(ConfigEditor.IP);
            port = map.get(ConfigEditor.PORT);
            url = "http://" + ip + ":" + port + "/Server/ServerServlet";
            connect = new ClientHttp(url);
            Logger.i(TAG, "Cfg url = " + url);
            jobs = new ArrayList<>();
            fillTableJob();
            jobTable.addMouseListener(new LocalMouseAdapter());
        } else {
            enableComponents(PanelContent, false);
        }
        enableComponents(jPanel1, false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectDialog = new javax.swing.JDialog();
        TestConnect = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        IpField = new javax.swing.JTextField();
        PortField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        CfgOk = new javax.swing.JButton();
        CfgCancel = new javax.swing.JButton();
        PingProgress = new javax.swing.JProgressBar();
        resultText = new javax.swing.JLabel();
        addJobDialog = new javax.swing.JDialog();
        addJobPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jobNameField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jobStateLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        loadDataButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jobText = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        processedText = new javax.swing.JTextArea();
        addJobButton = new javax.swing.JButton();
        closeJobButton = new javax.swing.JButton();
        addJobProgress = new javax.swing.JProgressBar();
        saveJobButton = new javax.swing.JButton();
        PanelContent = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jobTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        connectDialog.setAlwaysOnTop(true);
        connectDialog.setMinimumSize(new java.awt.Dimension(265, 140));

        TestConnect.setText("Test");
        TestConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestConnectActionPerformed(evt);
            }
        });

        jLabel1.setText("IP");

        jLabel2.setText("Port");

        jPanel1.setEnabled(false);

        CfgOk.setText("OK");
        CfgOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CfgOkActionPerformed(evt);
            }
        });

        CfgCancel.setText("Отмена");
        CfgCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CfgCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(CfgOk, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CfgCancel)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CfgOk)
                    .addComponent(CfgCancel)))
        );

        javax.swing.GroupLayout connectDialogLayout = new javax.swing.GroupLayout(connectDialog.getContentPane());
        connectDialog.getContentPane().setLayout(connectDialogLayout);
        connectDialogLayout.setHorizontalGroup(
            connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(connectDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(connectDialogLayout.createSequentialGroup()
                                .addComponent(TestConnect)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(connectDialogLayout.createSequentialGroup()
                                .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(IpField)
                                    .addComponent(PortField, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, connectDialogLayout.createSequentialGroup()
                        .addComponent(PingProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(connectDialogLayout.createSequentialGroup()
                        .addComponent(resultText)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        connectDialogLayout.setVerticalGroup(
            connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(IpField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(PortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TestConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(PingProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        addJobDialog.setAlwaysOnTop(true);
        addJobDialog.setMinimumSize(new java.awt.Dimension(560, 550));

        jLabel3.setText("Название задачи");

        jLabel4.setText("Статус задачи:");

        jobStateLabel.setText("новая");

        jLabel6.setText("Данные для обработки");

        loadDataButton.setText("Загрузить");
        loadDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataButtonActionPerformed(evt);
            }
        });

        jobText.setColumns(20);
        jobText.setRows(5);
        jScrollPane2.setViewportView(jobText);

        jLabel7.setText("Обработанные данные");

        processedText.setColumns(20);
        processedText.setRows(5);
        processedText.setEnabled(false);
        jScrollPane3.setViewportView(processedText);

        addJobButton.setText("Отправить");
        addJobButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJobButtonActionPerformed(evt);
            }
        });

        closeJobButton.setText("Закрыть");
        closeJobButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeJobButtonActionPerformed(evt);
            }
        });

        saveJobButton.setText("Сохранить в файл");
        saveJobButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJobButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addJobPanelLayout = new javax.swing.GroupLayout(addJobPanel);
        addJobPanel.setLayout(addJobPanelLayout);
        addJobPanelLayout.setHorizontalGroup(
            addJobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addJobPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addJobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addJobPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadDataButton))
                    .addGroup(addJobPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveJobButton))
                    .addGroup(addJobPanelLayout.createSequentialGroup()
                        .addComponent(addJobButton)
                        .addGap(18, 18, 18)
                        .addComponent(closeJobButton))
                    .addComponent(addJobProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addJobPanelLayout.createSequentialGroup()
                        .addGroup(addJobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addJobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jobStateLabel)
                            .addComponent(jobNameField))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addJobPanelLayout.setVerticalGroup(
            addJobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addJobPanelLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(addJobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jobNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addJobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jobStateLabel))
                .addGap(18, 18, 18)
                .addGroup(addJobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(loadDataButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(addJobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(saveJobButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addJobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addJobButton)
                    .addComponent(closeJobButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addJobProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout addJobDialogLayout = new javax.swing.GroupLayout(addJobDialog.getContentPane());
        addJobDialog.getContentPane().setLayout(addJobDialogLayout);
        addJobDialogLayout.setHorizontalGroup(
            addJobDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addJobDialogLayout.createSequentialGroup()
                .addComponent(addJobPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 4, Short.MAX_VALUE))
        );
        addJobDialogLayout.setVerticalGroup(
            addJobDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addJobPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jobTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Название задачи", "Состояние"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jobTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jobTable);

        jButton1.setLabel("Добавить задание");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelContentLayout = new javax.swing.GroupLayout(PanelContent);
        PanelContent.setLayout(PanelContentLayout);
        PanelContentLayout.setHorizontalGroup(
            PanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelContentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(619, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
        );
        PanelContentLayout.setVerticalGroup(
            PanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelContentLayout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jButton1.getAccessibleContext().setAccessibleName("AddButton");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Настройка");

        jMenuItem1.setText("Настройка подключения");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PanelContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addComponent(PanelContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //<editor-fold defaultstate="collapsed" desc="Настрока подключения">
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        loadAddJobDialog(null);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        connectDialog.setVisible(true);
        IpField.setText(ip);
        PortField.setText(port);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void TestConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestConnectActionPerformed
        // Тест подключения
        ip = IpField.getText();
        port = PortField.getText();
        String localUrl = "http://" + ip + ":" + port + "/Server/ServerServlet";
        connect = new ClientHttp(localUrl);
        new Thread(new PingTask(new LocalPingListener(), connect)).start();

    }//GEN-LAST:event_TestConnectActionPerformed

    private void CfgOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CfgOkActionPerformed
        Map<String, String> map = new HashMap();
        map.put(ConfigEditor.IP, ip);
        map.put(ConfigEditor.PORT, port);
        if (ConfigEditor.setConfig(map, CONFIG_NAME)) {
            connectDialog.setVisible(false);
            enableComponents(PanelContent, true);
        }
    }//GEN-LAST:event_CfgOkActionPerformed

    private void CfgCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CfgCancelActionPerformed
        connectDialog.setVisible(false);
    }//GEN-LAST:event_CfgCancelActionPerformed
    //</editor-fold>

    private void addJobButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJobButtonActionPerformed
        // TODO add your handling code here:
        if (validateAddJob()) {
            if (connect != null) {
                Job<Data, Data> job = new Job<>(new Data(jobText.getText()), null, jobNameField.getText(), Response.PROCESS_ERROR);
                new Thread(new JobTask(new LocalAddJobListener(), connect, job)).start();
            } else {
                showError("Ненастроено соединение с сервером!");
            }
        }
    }//GEN-LAST:event_addJobButtonActionPerformed

    private void closeJobButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeJobButtonActionPerformed
        // TODO add your handling code here:
        addJobDialog.setVisible(false);
    }//GEN-LAST:event_closeJobButtonActionPerformed

    private void saveJobButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJobButtonActionPerformed
        File file = selectFile("Выбрать");
        FileHelper.saveResultJob(new Data(processedText.getText()), file);
    }//GEN-LAST:event_saveJobButtonActionPerformed

    private void loadDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDataButtonActionPerformed
        File file = selectFile("Открыть файл");
        try {
            jobText.setText(FileHelper.inputLoad(file).getData());
        } catch (IOException ex) {
            showError(ex.getMessage());
        }
    }//GEN-LAST:event_loadDataButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    private void enableComponents(Container container, boolean enable) {
        Component[] components = container.getComponents();
        for (Component component : components) {
            component.setEnabled(enable);
            if (component instanceof Container) {
                enableComponents((Container) component, enable);
            }
        }
    }

    private File selectFile(String okButtomTest){
        JFileChooser fileopen = new JFileChooser();
        int ret = fileopen.showDialog(null, okButtomTest);
        if (ret == JFileChooser.APPROVE_OPTION) {
            return fileopen.getSelectedFile();
        }
        return null;
    }
    
    private void loadAddJobDialog(Job<Data, Data> job) {
        Logger.i(TAG, "Dialog: " + job);
        if (job == null) {
            jobNameField.setText("");
            jobStateLabel.setText(NEW);
            jobText.setText("");
            processedText.setText("");
            processedText.setEnabled(false);
            addJobButton.setEnabled(true);

            addJobDialog.setVisible(true);
        } else {
            jobNameField.setText(job.getName());
            switch (job.getState()) {
                case Response.OK:
                    jobStateLabel.setText(OK);
                    processedText.setText(job.getOutputData().getData());
                    break;
                default:
                    jobStateLabel.setText(ERROR);
                    break;

            }
            jobText.setText(job.getInputData().getData());
            
            processedText.setEnabled(false);
            addJobButton.setEnabled(false);

            addJobDialog.setVisible(true);
        }
    }

    private boolean validateAddJob() {
        if (jobNameField.getText().equals("")) {
            showError("Необходимо указать название задания!");
            return false;
        }

        if (!isUniqueName(jobNameField.getText())) {
            showError("Название с таким именем уже существует!");
            return false;
        }

        if (jobText.getText().equals("")) {
            showError("Необходимо указать данные задания!");
            return false;
        }

        return true;
    }

    private boolean isUniqueName(String name) {
        if (jobs != null) {
            for (Job job : jobs) {
                if (job.getName().equals(name)) {
                    return false;
                }
            }
        }
        return true;
    }

    private Job findJobByName(String name) {
        if (jobs != null) {
            for (Job job : jobs) {
                if (job.getName().equals(name)) {
                    return job;
                }
            }
        }
        return null;
    }

    private void showError(String messege) {
        JOptionPane.showMessageDialog(null, messege);
    }

    private void fillTableJob() {
        if (jobs != null) {
            DefaultTableModel model = (DefaultTableModel) jobTable.getModel();
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            Object rowData[] = new Object[2];
            for (int i = 0; i < jobs.size(); i++) {
                rowData[0] = jobs.get(i).getName();
                rowData[1] = jobs.get(i).getState() == Response.OK ? OK : ERROR;
                model.addRow(rowData);
            }
        }
    }

    private class LocalMouseAdapter extends MouseAdapter {

        @Override
        public void mouseClicked(MouseEvent e) {
            Point p = e.getPoint();
            int row = jobTable.rowAtPoint(p);
            int column = jobTable.columnAtPoint(p);
            DefaultTableModel model = (DefaultTableModel) jobTable.getModel();
            System.out.println("Click on " + column + " column, " + row + " row; " + model.getValueAt(row, column));
            String name = (String) model.getValueAt(row, 0);
            loadAddJobDialog(findJobByName(name));
        }
    }

    /**
     * Слушатель отправки задачи
     */
    private class LocalAddJobListener implements ConnectListener {

        @Override
        public void onStart() {
            addJobProgress.setIndeterminate(true);
            enableComponents(addJobPanel, false);
        }

        @Override
        public void onResult(Response response) {
            addJobProgress.setIndeterminate(false);
            enableComponents(addJobPanel, true);
            Job<Data, Data> job = (Job<Data, Data>) response.getData();
            loadAddJobDialog(job);

            jobs.add(job);
            fillTableJob();
        }

        @Override
        public void onError(Exception ex) {
            addJobProgress.setIndeterminate(false);
            enableComponents(addJobPanel, true);
            Logger.e(TAG, ex + "", ex);
            showError(ex + "");
            processedText.setEnabled(false);
            addJobButton.setEnabled(false);

            fillTableJob();
        }
    }

    /**
     * Слушатель подключения
     */
    private class LocalPingListener implements ConnectListener {

        @Override
        public void onStart() {
            PingProgress.setIndeterminate(true);
        }

        @Override
        public void onResult(Response response) {
            PingProgress.setIndeterminate(false);
            if (response.getResultCode() == Response.OK) {
                enableComponents(jPanel1, true);
                resultText.setText("Connect OK");
            } else {
                resultText.setText("Connect failed");
            }
        }

        @Override
        public void onError(Exception ex) {
            PingProgress.setIndeterminate(false);
            Logger.e(TAG, ex.getMessage());
            resultText.setText("Connect failed");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CfgCancel;
    private javax.swing.JButton CfgOk;
    private javax.swing.JTextField IpField;
    private javax.swing.JPanel PanelContent;
    private javax.swing.JProgressBar PingProgress;
    private javax.swing.JTextField PortField;
    private javax.swing.JButton TestConnect;
    private javax.swing.JButton addJobButton;
    private javax.swing.JDialog addJobDialog;
    private javax.swing.JPanel addJobPanel;
    private javax.swing.JProgressBar addJobProgress;
    private javax.swing.JButton closeJobButton;
    private javax.swing.JDialog connectDialog;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jobNameField;
    private javax.swing.JLabel jobStateLabel;
    private javax.swing.JTable jobTable;
    private javax.swing.JTextArea jobText;
    private javax.swing.JButton loadDataButton;
    private javax.swing.JTextArea processedText;
    private javax.swing.JLabel resultText;
    private javax.swing.JButton saveJobButton;
    // End of variables declaration//GEN-END:variables
}
