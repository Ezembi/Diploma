/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package admin.gui;

import admin.tasks.PingTask;
import admin.tasks.VMStateTask;
import admin.utils.ConfigEditor;
import java.awt.Component;
import java.awt.Container;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.data.Response;
import model.data.VirtualMachine;
import model.utils.Logger;
import model.web.ClientHttp;
import model.web.ClientHttp.ConnectListener;


/**
 *
 * @author user
 */
public class Admin extends javax.swing.JFrame {
    
    private String url = "";
    private final String TAG = "Client";
    private final String CONFIG_NAME = "connect.cfg";
    private String ip, port;
    private ClientHttp connect = null;
    private List<VirtualMachine> vm = null;

    /**
     * Creates new form Admin
     */
    public Admin() {
        initComponents();
        Map<String, String> map = new HashMap();

        map = ConfigEditor.getConfig(CONFIG_NAME);
        if (map != null) {
            ip = map.get(ConfigEditor.IP);
            port = map.get(ConfigEditor.PORT);
            url = "http://" + ip + ":" + port + "/Server/ServerServlet";
            connect = new ClientHttp(url);
            Logger.i(TAG, "Cfg url = " + url);

            vmTable.addMouseListener(new LocalMouseAdapter());
            new Thread(new VMStateTask(new LocalVMStateLoadListener(), connect)).start();
        } else {
            enableComponents(adminPanel, false);
        }
        enableComponents(jPanel1, false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectDialog = new javax.swing.JDialog();
        TestConnect = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        IpField = new javax.swing.JTextField();
        PortField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        CfgOk = new javax.swing.JButton();
        CfgCancel = new javax.swing.JButton();
        PingProgress = new javax.swing.JProgressBar();
        resultText = new javax.swing.JLabel();
        vmStateDialog = new javax.swing.JDialog();
        vmInfoPanel = new javax.swing.JPanel();
        adminPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        vmTable = new javax.swing.JTable();
        updateButton = new javax.swing.JButton();
        vmLoadProgress = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        connectMenu = new javax.swing.JMenuItem();

        connectDialog.setMinimumSize(new java.awt.Dimension(265, 140));

        TestConnect.setText("Test");
        TestConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestConnectActionPerformed(evt);
            }
        });

        jLabel1.setText("IP");

        jLabel2.setText("Port");

        jPanel1.setEnabled(false);

        CfgOk.setText("OK");
        CfgOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CfgOkActionPerformed(evt);
            }
        });

        CfgCancel.setText("Отмена");
        CfgCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CfgCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(CfgOk, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CfgCancel)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CfgOk)
                    .addComponent(CfgCancel)))
        );

        javax.swing.GroupLayout connectDialogLayout = new javax.swing.GroupLayout(connectDialog.getContentPane());
        connectDialog.getContentPane().setLayout(connectDialogLayout);
        connectDialogLayout.setHorizontalGroup(
            connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(connectDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(connectDialogLayout.createSequentialGroup()
                                .addComponent(TestConnect)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(connectDialogLayout.createSequentialGroup()
                                .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(IpField)
                                    .addComponent(PortField, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, connectDialogLayout.createSequentialGroup()
                        .addComponent(PingProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(connectDialogLayout.createSequentialGroup()
                        .addComponent(resultText)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        connectDialogLayout.setVerticalGroup(
            connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(IpField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(PortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TestConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(PingProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        vmStateDialog.setMinimumSize(new java.awt.Dimension(400, 300));

        javax.swing.GroupLayout vmInfoPanelLayout = new javax.swing.GroupLayout(vmInfoPanel);
        vmInfoPanel.setLayout(vmInfoPanelLayout);
        vmInfoPanelLayout.setHorizontalGroup(
            vmInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        vmInfoPanelLayout.setVerticalGroup(
            vmInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout vmStateDialogLayout = new javax.swing.GroupLayout(vmStateDialog.getContentPane());
        vmStateDialog.getContentPane().setLayout(vmStateDialogLayout);
        vmStateDialogLayout.setHorizontalGroup(
            vmStateDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(vmInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        vmStateDialogLayout.setVerticalGroup(
            vmStateDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(vmInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        vmTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "CPU", "Ram", "IP", "Port"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(vmTable);

        updateButton.setText("Обновить");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adminPanelLayout = new javax.swing.GroupLayout(adminPanel);
        adminPanel.setLayout(adminPanelLayout);
        adminPanelLayout.setHorizontalGroup(
            adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE)
            .addGroup(adminPanelLayout.createSequentialGroup()
                .addComponent(updateButton)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(vmLoadProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        adminPanelLayout.setVerticalGroup(
            adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, adminPanelLayout.createSequentialGroup()
                .addGap(0, 19, Short.MAX_VALUE)
                .addComponent(updateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vmLoadProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Настройка");

        connectMenu.setText("Настройка подключения");
        connectMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectMenuActionPerformed(evt);
            }
        });
        jMenu2.add(connectMenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TestConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestConnectActionPerformed
        // Тест подключения
        ip = IpField.getText();
        port = PortField.getText();
        String localUrl = "http://" + ip + ":" + port + "/Server/ServerServlet";
        connect = new ClientHttp(localUrl);
        new Thread(new PingTask(new LocalPingListener(), connect)).start();
    }//GEN-LAST:event_TestConnectActionPerformed

    private void CfgOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CfgOkActionPerformed
        Map<String, String> map = new HashMap();
        map.put(ConfigEditor.IP, ip);
        map.put(ConfigEditor.PORT, port);
        if (ConfigEditor.setConfig(map, CONFIG_NAME)) {
            connectDialog.setVisible(false);
            enableComponents(adminPanel, true);
        }
    }//GEN-LAST:event_CfgOkActionPerformed

    private void CfgCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CfgCancelActionPerformed
        connectDialog.setVisible(false);
    }//GEN-LAST:event_CfgCancelActionPerformed

    private void connectMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectMenuActionPerformed
        // TODO add your handling code here:
        connectDialog.setVisible(true);
        IpField.setText(ip);
        PortField.setText(port);
    }//GEN-LAST:event_connectMenuActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        new Thread(new VMStateTask(new LocalVMStateLoadListener(), connect)).start();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void enableComponents(Container container, boolean enable) {
        Component[] components = container.getComponents();
        for (Component component : components) {
            component.setEnabled(enable);
            if (component instanceof Container) {
                enableComponents((Container) component, enable);
            }
        }
    }
    
    private void fillVMTable(){
        if (vm != null) {
            DefaultTableModel model = (DefaultTableModel) vmTable.getModel();
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            Object rowData[] = new Object[5];
            for (int i = 0; i < vm.size(); i++) {
                rowData[0] = vm.get(i).getId();
                rowData[1] = vm.get(i).getCpu();
                rowData[2] = vm.get(i).getRam();
                rowData[3] = vm.get(i).getIp();
                rowData[4] = vm.get(i).getPort();
                model.addRow(rowData);
            }
        }
    }
    
    private void showError(String messege) {
        JOptionPane.showMessageDialog(null, messege);
    }
    
    private void openVMStateDialog(VirtualMachine vm){
        VMStateChartPanel cp = new VMStateChartPanel(this, "", false, vm);
        cp.setVisible(true);
    }
    
    
    
    private class LocalMouseAdapter extends MouseAdapter {

        @Override
        public void mouseClicked(MouseEvent e) {
            Point p = e.getPoint();
            int row = vmTable.rowAtPoint(p);
            int column = vmTable.columnAtPoint(p);
            DefaultTableModel model = (DefaultTableModel) vmTable.getModel();
            System.out.println("Click on " + column + " column, " + row + " row; " + model.getValueAt(row, column));
            int id = (int) model.getValueAt(row, 0);
            int cpu = (int) model.getValueAt(row, 1);
            long ram = (long) model.getValueAt(row, 2);
            String ip =  (String) model.getValueAt(row, 3);
            int port = (int) model.getValueAt(row, 4);
            VirtualMachine vm = new VirtualMachine(id, ram, cpu, ip, port);
            openVMStateDialog(vm);
        }

    }
    
    /**
     * Слушатель подключения
     */
    private class LocalPingListener implements ConnectListener {

        @Override
        public void onStart() {
            PingProgress.setIndeterminate(true);
        }

        @Override
        public void onResult(Response response) {
            PingProgress.setIndeterminate(false);
            if (response.getResultCode() == Response.OK) {
                enableComponents(jPanel1, true);
                resultText.setText("Connect OK");
            } else {
                resultText.setText("Connect failed");
            }
        }

        @Override
        public void onError(Exception ex) {
            PingProgress.setIndeterminate(false);
            Logger.e(TAG, ex.getMessage());
            resultText.setText("Connect failed");
        }
    }
    
    /**
     * Слушатель отправки задачи
     */
    private class LocalVMStateLoadListener implements ConnectListener {

        @Override
        public void onStart() {
            vmLoadProgress.setIndeterminate(true);
            enableComponents(adminPanel, false);
        }

        @Override
        public void onResult(Response response) {
            vmLoadProgress.setIndeterminate(false);
            enableComponents(adminPanel, true);
            
            vm = (List<VirtualMachine>) response.getData();
            fillVMTable();
        }

        @Override
        public void onError(Exception ex) {
            vmLoadProgress.setIndeterminate(false);
            enableComponents(adminPanel, true);
            Logger.e(TAG, ex + "");
            
            showError(ex + "");
        }
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CfgCancel;
    private javax.swing.JButton CfgOk;
    private javax.swing.JTextField IpField;
    private javax.swing.JProgressBar PingProgress;
    private javax.swing.JTextField PortField;
    private javax.swing.JButton TestConnect;
    private javax.swing.JPanel adminPanel;
    private javax.swing.JDialog connectDialog;
    private javax.swing.JMenuItem connectMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel resultText;
    private javax.swing.JButton updateButton;
    private javax.swing.JPanel vmInfoPanel;
    private javax.swing.JProgressBar vmLoadProgress;
    private javax.swing.JDialog vmStateDialog;
    private javax.swing.JTable vmTable;
    // End of variables declaration//GEN-END:variables
}
